use super::*;

parameterized_test! {can_create_clusters, (k, expected), {
    can_create_clusters_impl(k, expected);
}}

can_create_clusters! {
    case01: (2, vec![(7, vec![6, 7, 8]), (3, vec![0, 1, 2, 3, 4, 5])]),
    case02: (3, vec![(0, vec![0, 1, 2]), (4, vec![3, 4, 5]),  (7, vec![6, 7, 8])]),
    case03: (4, vec![(0, vec![0, 1, 2]), (4, vec![3, 4, 5]), (6, vec![6]), (7, vec![7, 8])]),
}

pub fn can_create_clusters_impl(k: usize, expected: Vec<(usize, Vec<usize>)>) {
    #[rustfmt::skip]
    let distances = vec![
      vec![0.0, 0.8341, 0.3686, 8.0639, 8.8835, 8.6478, 12.2809, 12.8486, 13.313],
      vec![0.8341, 0.0, 0.983, 7.7073, 8.5811, 8.3868, 11.4483, 12.0148, 12.4789],
      vec![0.3686, 0.983, 0.0, 7.7881, 8.5899, 8.3431, 12.3873, 12.9251, 13.3981],
      vec![8.0639, 7.7073, 7.7881, 0.0, 1.0305, 1.193, 11.5335, 11.3159, 11.8799],
      vec![8.8835, 8.5811, 8.5899, 1.0305, 0.0, 0.5042, 12.3838, 12.1047, 12.6662],
      vec![8.6478, 8.3868, 8.3431, 1.193, 0.5042, 0.0, 12.7067, 12.4625, 13.0255],
      vec![12.2809, 11.4483, 12.3873, 11.5335, 12.3838, 12.7067, 0.0, 1.1931, 1.2783],
      vec![12.8486, 12.0148, 12.9251, 11.3159, 12.1047, 12.4625, 1.1931, 0.0, 0.5647],
      vec![13.313, 12.4789, 13.3981, 11.8799, 12.6662, 13.0255, 1.2783, 0.5647, 0.0],
    ];
    let data = (0..distances.len()).collect::<Vec<usize>>();

    let clusters = create_kmedoids(&data, k, move |p1: &usize, p2: &usize| distances[*p1][*p2]);

    for (medoid, points) in expected {
        assert_eq!(clusters[&medoid], points);
    }
}

#[test]
pub fn can_create_hierarchical_clusters() {
    #[rustfmt::skip]
    let expected = [
        vec![
            (17, vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),
            (21, vec![20, 21, 22, 23, 24, 25, 26, 27, 28, 29])
        ],
        vec![
            (2, vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9]),
            (14, vec![10, 11, 12, 13, 14, 15, 16, 17, 18, 19]),
            (21, vec![21, 22, 23, 24, 25, 26, 28]),
            (27, vec![20, 27, 29])
        ],
        vec![
            (1, vec![1, 3]),
            (5, vec![0, 2, 4, 5, 6, 7, 8, 9]),
            (11, vec![10, 11, 16, 17, 18]),
            (13, vec![12, 13, 14, 15, 19]),
            (20, vec![20]),
            (24, vec![24]),
            (27, vec![27, 29]),
            (28, vec![21, 22, 23, 25, 26, 28]),
        ],
    ];
    #[rustfmt::skip]
    let distances =
        vec![
            vec![0.0, 3.3363, 1.4743, 2.8228, 2.3639, 2.0289, 3.5864, 4.5235, 3.1518, 3.7929, 6.5559, 8.2642, 10.3785, 11.7016, 10.1634, 12.3728, 8.5758, 6.8758, 7.8702, 11.879, 13.8666, 12.7283, 12.0395, 15.4246, 9.9198, 12.6412, 14.5393, 15.4684, 12.7129, 15.3461],
            vec![3.3363, 0.0, 3.9321, 2.3989, 2.9728, 4.5562, 6.9204, 6.3175, 4.1078, 6.6442, 5.6712, 8.6663, 9.739, 11.0126, 9.7903, 10.8235, 8.6932, 7.1036, 8.6997, 11.316, 10.5462, 9.3946, 8.8551, 12.1051, 6.5976, 9.3079, 11.2334, 12.1556, 9.4261, 12.0102],
            vec![1.4743, 3.9321, 0.0, 4.1432, 1.6231, 0.6518, 3.4907, 3.0529, 1.9048, 2.7145, 5.5647, 6.8694, 9.1763, 10.4916, 8.8966, 11.427, 7.228, 5.5442, 6.4224, 10.6341, 14.3798, 13.0824, 12.0748, 15.687, 10.4455, 13.0938, 14.7632, 16.002, 12.9043, 15.7555],
            vec![2.8228, 2.3989, 4.1432, 0.0, 4.122, 4.772, 5.9915, 7.1233, 5.2627, 6.6144, 7.7709, 10.3199, 11.8358, 13.1391, 11.793, 13.1659, 10.4781, 8.8013, 10.1388, 13.4034, 11.8445, 10.9926, 10.8911, 13.7801, 7.9904, 10.7438, 12.9795, 13.3881, 11.2593, 13.4614],
            vec![2.3639, 2.9728, 1.6231, 4.122, 0.0, 2.0166, 5.1136, 3.3447, 1.1788, 4.0069, 4.192, 6.214, 8.0582, 9.3818, 7.8915, 10.019, 6.4215, 4.7242, 6.0218, 9.5816, 13.0407, 11.6515, 10.5092, 14.1986, 9.1468, 11.722, 13.2601, 14.6687, 11.3937, 14.344],
            vec![2.0289, 4.5562, 0.6518, 4.772, 2.0166, 0.0, 3.2205, 2.5304, 1.9081, 2.0916, 5.6136, 6.5536, 9.0381, 10.341, 8.7054, 11.4535, 6.9668, 5.3162, 6.023, 10.4542, 14.9531, 13.6206, 12.5259, 16.1969, 11.0279, 13.6555, 15.2638, 16.5777, 13.3997, 16.3031],
            vec![3.5864, 6.9204, 3.4907, 5.9915, 5.1136, 3.2205, 0.0, 4.7723, 5.1133, 2.5087, 8.7916, 9.0959, 11.9461, 13.2079, 11.5092, 14.584, 9.6452, 8.1331, 8.3108, 13.2563, 17.4515, 16.3043, 15.4934, 18.9821, 13.5056, 16.2273, 18.084, 19.0507, 16.2434, 18.9305],
            vec![4.5235, 6.3175, 3.0529, 7.1233, 3.3447, 2.5304, 4.7723, 0.0, 2.2587, 2.3578, 4.7249, 4.3274, 7.2439, 8.4738, 6.7596, 10.1359, 4.8763, 3.4373, 3.6147, 8.4991, 16.0451, 14.5048, 12.9494, 16.8752, 12.2469, 14.6871, 15.9026, 17.6695, 14.0396, 17.2092],
            vec![3.1518, 4.1078, 1.9048, 5.2627, 1.1788, 1.9081, 5.1133, 2.2587, 0.0, 3.4595, 3.7082, 5.1502, 7.2795, 8.5977, 7.0251, 9.5586, 5.4282, 3.726, 4.8796, 8.7528, 13.8616, 12.38, 11.012, 14.8354, 10.0249, 12.5169, 13.8768, 15.4892, 12.0069, 15.0842],
            vec![3.7929, 6.6442, 2.7145, 6.6144, 4.0069, 2.0916, 2.5087, 2.3578, 3.4595, 0.0, 6.8274, 6.6331, 9.6015, 10.8298, 9.1124, 12.4365, 7.2164, 5.7914, 5.8118, 10.8469, 17.0256, 15.6583, 14.4409, 18.195, 13.1086, 15.7181, 17.2499, 18.6519, 15.381, 18.3496],
            vec![6.5559, 5.6712, 5.5647, 7.7709, 4.192, 5.6136, 8.7916, 4.7249, 3.7082, 6.8274, 0.0, 3.6836, 4.0761, 5.3698, 4.1347, 5.8625, 3.3941, 2.3696, 4.2829, 5.6512, 12.5595, 10.7866, 8.7448, 12.8176, 9.2049, 11.1725, 11.8274, 14.1236, 10.0298, 13.4186],
            vec![8.2642, 8.6663, 6.8694, 10.3199, 6.214, 6.5536, 9.0959, 4.3274, 5.1502, 6.6331, 3.6836, 0.0, 3.3062, 4.3481, 2.6308, 6.6893, 0.7517, 1.5641, 1.1066, 4.2791, 16.1894, 14.3743, 12.1442, 16.2397, 12.8885, 14.8057, 15.2524, 17.7311, 13.5165, 16.958],
            vec![10.3785, 9.739, 9.1763, 11.8358, 8.0582, 9.0381, 11.9461, 7.2439, 7.2795, 9.6015, 4.0761, 3.3062, 0.0, 1.3238, 0.8131, 3.4846, 2.5671, 3.8169, 4.4067, 1.577, 14.9526, 13.0279, 10.4432, 14.4382, 12.2241, 13.6198, 13.4826, 16.3698, 11.9315, 15.4007],
            vec![11.7016, 11.0126, 10.4916, 13.1391, 9.3818, 10.341, 13.2079, 8.4738, 8.5977, 10.8298, 5.3698, 4.3481, 1.3238, 0.0, 1.7301, 3.1509, 3.6598, 5.0769, 5.4049, 0.5035, 15.6274, 13.6828, 10.9921, 14.8796, 13.1243, 14.3284, 13.9505, 16.9828, 12.5044, 15.9418],
            vec![10.1634, 9.7903, 8.8966, 11.793, 7.8915, 8.7054, 11.5092, 6.7596, 7.0251, 9.1124, 4.1347, 2.6308, 0.8131, 1.7301, 0.0, 4.2879, 1.9303, 3.3993, 3.7081, 1.7527, 15.5466, 13.6358, 11.1044, 15.1291, 12.694, 14.1999, 14.1661, 16.9901, 12.5785, 16.0532],
            vec![12.3728, 10.8235, 11.427, 13.1659, 10.019, 11.4535, 14.584, 10.1359, 9.5586, 12.4365, 5.8625, 6.6893, 3.4846, 3.1509, 4.2879, 0.0, 5.9377, 6.7742, 7.7944, 3.6156, 13.2064, 11.2581, 8.4433, 12.0996, 11.2706, 11.9954, 11.2173, 14.4342, 9.958, 13.2899],
            vec![8.5758, 8.6932, 7.228, 10.4781, 6.4215, 6.9668, 9.6452, 4.8763, 5.4282, 7.2164, 3.3941, 0.7517, 2.5671, 3.6598, 1.9303, 5.9377, 0.0, 1.7036, 1.8579, 3.6345, 15.7507, 13.9083, 11.6039, 15.6952, 12.551, 14.3723, 14.711, 17.2724, 13.0028, 16.4601],
            vec![6.8758, 7.1036, 5.5442, 8.8013, 4.7242, 5.3162, 8.1331, 3.4373, 3.726, 5.7914, 2.3696, 1.5641, 3.8169, 5.0769, 3.3993, 6.7742, 1.7036, 0.0, 1.9209, 5.1519, 14.9204, 13.1556, 11.0836, 15.1673, 11.4968, 13.5329, 14.177, 16.4895, 12.3908, 15.7874],
            vec![7.8702, 8.6997, 6.4224, 10.1388, 6.0218, 6.023, 8.3108, 3.6147, 4.8796, 5.8118, 4.2829, 1.1066, 4.4067, 5.4049, 3.7081, 7.7944, 1.8579, 1.9209, 0.0, 5.2965, 16.8399, 15.0681, 12.9483, 17.04, 13.4077, 15.4525, 16.0501, 18.4064, 14.2797, 17.6907],
            vec![11.879, 11.316, 10.6341, 13.4034, 9.5816, 10.4542, 13.2563, 8.4991, 8.7528, 10.8469, 5.6512, 4.2791, 1.577, 0.5035, 1.7527, 3.6156, 3.6345, 5.1519, 5.2965, 0.0, 16.121, 14.1775, 11.4925, 15.3831, 13.5863, 14.8185, 14.4536, 17.481, 13.004, 16.4433],
            vec![13.8666, 10.5462, 14.3798, 11.8445, 13.0407, 14.9531, 17.4515, 16.0451, 13.8616, 17.0256, 12.5595, 16.1894, 14.9526, 15.6274, 15.5466, 13.2064, 15.7507, 14.9204, 16.8399, 16.121, 0.0, 1.9522, 4.7788, 2.9816, 3.9486, 1.3876, 2.9646, 1.6285, 3.2985, 1.8028],
            vec![12.7283, 9.3946, 13.0824, 10.9926, 11.6515, 13.6206, 16.3043, 14.5048, 12.38, 15.6583, 10.7866, 14.3743, 13.0279, 13.6828, 13.6358, 11.2581, 13.9083, 13.1556, 15.0681, 14.1775, 1.9522, 0.0, 2.8515, 2.8027, 3.0648, 0.8954, 2.1431, 3.3666, 1.4472, 2.7052],
            vec![12.0395, 8.8551, 12.0748, 10.8911, 10.5092, 12.5259, 15.4934, 12.9494, 11.012, 14.4409, 8.7448, 12.1442, 10.4432, 10.9921, 11.1044, 8.4433, 11.6039, 11.0836, 12.9483, 11.4925, 4.7788, 2.8515, 0.0, 4.0957, 4.1993, 3.6669, 3.1084, 6.008, 1.5196, 4.9597],
            vec![15.4246, 12.1051, 15.687, 13.7801, 14.1986, 16.1969, 18.9821, 16.8752, 14.8354, 18.195, 12.8176, 16.2397, 14.4382, 14.8796, 15.1291, 12.0996, 15.6952, 15.1673, 17.04, 15.3831, 2.9816, 2.8027, 4.0957, 0.0, 5.8652, 3.2837, 0.9904, 2.9939, 2.8356, 1.5922],
            vec![9.9198, 6.5976, 10.4455, 7.9904, 9.1468, 11.0279, 13.5056, 12.2469, 10.0249, 13.1086, 9.2049, 12.8885, 12.2241, 13.1243, 12.694, 11.2706, 12.551, 11.4968, 13.4077, 13.5863, 3.9486, 3.0648, 4.1993, 5.8652, 0.0, 2.7562, 5.1694, 5.5612, 3.7484, 5.4772],
            vec![12.6412, 9.3079, 13.0938, 10.7438, 11.722, 13.6555, 16.2273, 14.6871, 12.5169, 15.7181, 11.1725, 14.8057, 13.6198, 14.3284, 14.1999, 11.9954, 14.3723, 13.5329, 15.4525, 14.8185, 1.3876, 0.8954, 3.6669, 3.2837, 2.7562, 0.0, 2.8253, 2.9883, 2.3315, 2.7213],
            vec![14.5393, 11.2334, 14.7632, 12.9795, 13.2601, 15.2638, 18.084, 15.9026, 13.8768, 17.2499, 11.8274, 15.2524, 13.4826, 13.9505, 14.1661, 11.2173, 14.711, 14.177, 16.0501, 14.4536, 2.9646, 2.1431, 3.1084, 0.9904, 5.1694, 2.8253, 0.0, 3.4751, 1.8702, 2.1437],
            vec![15.4684, 12.1556, 16.002, 13.3881, 14.6687, 16.5777, 19.0507, 17.6695, 15.4892, 18.6519, 14.1236, 17.7311, 16.3698, 16.9828, 16.9901, 14.4342, 17.2724, 16.4895, 18.4064, 17.481, 1.6285, 3.3666, 6.008, 2.9939, 5.5612, 2.9883, 3.4751, 0.0, 4.4884, 1.4023],
            vec![12.7129, 9.4261, 12.9043, 11.2593, 11.3937, 13.3997, 16.2434, 14.0396, 12.0069, 15.381, 10.0298, 13.5165, 11.9315, 12.5044, 12.5785, 9.958, 13.0028, 12.3908, 14.2797, 13.004, 3.2985, 1.4472, 1.5196, 2.8356, 3.7484, 2.3315, 1.8702, 4.4884, 0.0, 3.476],
            vec![15.3461, 12.0102, 15.7555, 13.4614, 14.344, 16.3031, 18.9305, 17.2092, 15.0842, 18.3496, 13.4186, 16.958, 15.4007, 15.9418, 16.0532, 13.2899, 16.4601, 15.7874, 17.6907, 16.4433, 1.8028, 2.7052, 4.9597, 1.5922, 5.4772, 2.7213, 2.1437, 1.4023, 3.476, 0.0],
        ];
    let data = (0..distances.len()).collect::<Vec<usize>>();
    let tiers = 3;

    let hierarchy = create_hierarchical_kmedoids(&data, tiers, move |p1: &usize, p2: &usize| distances[*p1][*p2]);

    println!("hierarchy={hierarchy:?}\t");

    for (level, expected_clusters) in expected.iter().enumerate() {
        let clusters = &hierarchy[level];
        println!("clusters={clusters:?}\t");
        for (medoid, points) in expected_clusters {
            assert_eq!(clusters[medoid], *points);
        }
    }
}
